//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IUP.ChildrenOfTheDeep.Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Character Control"",
            ""id"": ""ae2fb916-a08f-4c46-8ef7-8e86b5f2b25f"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""d6a10878-430c-4d18-9344-5163320b0048"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Alt Movement Mode"",
                    ""type"": ""Button"",
                    ""id"": ""6ebcd9dc-6e16-42f4-aff4-fb452a8c1b09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Movement Mode"",
                    ""type"": ""Button"",
                    ""id"": ""3e0e0c35-7f49-430a-b1f9-44a3d064e2fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""9678fb75-f0c9-4694-b699-2ea18e755b4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2cc385fa-9e62-4d8b-a3f9-9a442f4c47ed"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""895ce7a3-4f4c-46ce-9d25-04bc348b04e7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f06481f0-f927-44f1-8174-fa21cc0e2630"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4730ca31-3dee-49e0-ab67-cfecd6807331"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""55e8c94c-94cb-487d-83ad-63897b6fbd02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""285644fe-a452-4a4f-9d6e-cce7212a7574"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d6489cf7-0a43-4a1f-ad3b-c80965d48846"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8c21307f-1611-48fa-8870-73407fc9a12b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a592d0ae-34f2-40e4-8aa7-1b74294bfe3e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09259623-2c2f-4755-bbd2-bfcf288c4775"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9124021-58d5-4724-9d5c-3d8e415300a2"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alt Movement Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1f41a49-38c9-4227-8d41-38e2d372a145"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Movement Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cdea06b-f4fa-427d-b226-0160226a70d7"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Character Control
            m_CharacterControl = asset.FindActionMap("Character Control", throwIfNotFound: true);
            m_CharacterControl_Direction = m_CharacterControl.FindAction("Direction", throwIfNotFound: true);
            m_CharacterControl_AltMovementMode = m_CharacterControl.FindAction("Alt Movement Mode", throwIfNotFound: true);
            m_CharacterControl_SwitchMovementMode = m_CharacterControl.FindAction("Switch Movement Mode", throwIfNotFound: true);
            m_CharacterControl_OpenInventory = m_CharacterControl.FindAction("Open Inventory", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character Control
        private readonly InputActionMap m_CharacterControl;
        private List<ICharacterControlActions> m_CharacterControlActionsCallbackInterfaces = new List<ICharacterControlActions>();
        private readonly InputAction m_CharacterControl_Direction;
        private readonly InputAction m_CharacterControl_AltMovementMode;
        private readonly InputAction m_CharacterControl_SwitchMovementMode;
        private readonly InputAction m_CharacterControl_OpenInventory;
        public struct CharacterControlActions
        {
            private @InputActions m_Wrapper;
            public CharacterControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Direction => m_Wrapper.m_CharacterControl_Direction;
            public InputAction @AltMovementMode => m_Wrapper.m_CharacterControl_AltMovementMode;
            public InputAction @SwitchMovementMode => m_Wrapper.m_CharacterControl_SwitchMovementMode;
            public InputAction @OpenInventory => m_Wrapper.m_CharacterControl_OpenInventory;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterControlActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Add(instance);
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
                @AltMovementMode.started += instance.OnAltMovementMode;
                @AltMovementMode.performed += instance.OnAltMovementMode;
                @AltMovementMode.canceled += instance.OnAltMovementMode;
                @SwitchMovementMode.started += instance.OnSwitchMovementMode;
                @SwitchMovementMode.performed += instance.OnSwitchMovementMode;
                @SwitchMovementMode.canceled += instance.OnSwitchMovementMode;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }

            private void UnregisterCallbacks(ICharacterControlActions instance)
            {
                @Direction.started -= instance.OnDirection;
                @Direction.performed -= instance.OnDirection;
                @Direction.canceled -= instance.OnDirection;
                @AltMovementMode.started -= instance.OnAltMovementMode;
                @AltMovementMode.performed -= instance.OnAltMovementMode;
                @AltMovementMode.canceled -= instance.OnAltMovementMode;
                @SwitchMovementMode.started -= instance.OnSwitchMovementMode;
                @SwitchMovementMode.performed -= instance.OnSwitchMovementMode;
                @SwitchMovementMode.canceled -= instance.OnSwitchMovementMode;
                @OpenInventory.started -= instance.OnOpenInventory;
                @OpenInventory.performed -= instance.OnOpenInventory;
                @OpenInventory.canceled -= instance.OnOpenInventory;
            }

            public void RemoveCallbacks(ICharacterControlActions instance)
            {
                if (m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterControlActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterControlActions @CharacterControl => new CharacterControlActions(this);
        public interface ICharacterControlActions
        {
            void OnDirection(InputAction.CallbackContext context);
            void OnAltMovementMode(InputAction.CallbackContext context);
            void OnSwitchMovementMode(InputAction.CallbackContext context);
            void OnOpenInventory(InputAction.CallbackContext context);
        }
    }
}
